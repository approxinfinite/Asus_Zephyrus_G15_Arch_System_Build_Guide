#0 => Create a bootable usb
   dd if=archlinux-version-x86_64.iso of=/dev/sdb bs=4M

#1 => Add to boot options by clicking e on boot screen 
   modprobe.blacklist=nouveau

#2 => Connect to Internet
   rfkill unblock all
   iwctl
   device list
   station wlan0 connect Zenos_5g

#3 => Ping some site on the Internet to verify connection
   ping -c 3 archlinux.org

#4 => Update system clock
   timedatectl set-ntp true

#5 => You can verify the status with 
   timedatectl status

#6 => Update your mirrorlist
   reflector --verbose --latest 200 --sort rate --save /etc/pacman.d/mirrorlist

#7 => Install terminus-font and archlinux-keyring
   pacman -Syy terminus-font archlinux-keyring

#8 => setfont
   setfont ter-v24b

#9 => Create partitions
   #Create EFI partition
   fdisk -l #to find the designation for the SSD. (Most likely /dev/nvme1n1)
   fdisk /dev/nvme1n1
    g #(to create a new partition table)
    n #(to create a new partition)
    1
    enter
    +1G
    t
    1 #(for EFI)
    #Create /root partition
    n
    2
    enter
    +40G
    w
    t
    19 #(for SWAP)
    #Create /root partition
    n
    3
    enter
    +128G
    #Create /home partiton
    n
    4
    enter
    enter
    w

#10 => Create the filesystems
   mkfs.fat -F32 /dev/nvme1n1p1
   mkswap /dev/nvme1n1p2
   swapon /dev/nvme1n1p2
   mkfs.ext4 /dev/nvme1n1p3
   mkfs.ext4 /dev/nvme1n1p4

#11 => Create the /, /boot and /home directories
    mount /dev/nvme1n1p3 /mnt
    mkdir /mnt/boot/EFI
    mount /dev/nvme1n1p1 /mnt/boot/EFI
    mkdir /mnt/home
    mount /dev/nvme1n1p4 /mnt/home

#12 => Install Arch linux base and vim packages
    pacstrap -i /mnt base vim

#13 => Generate the /etc/fstab file
    genfstab -U -p /mnt >> /mnt/etc/fstab

#14 => Copy systemd network configuration files
    cp /etc/systemd/network/* /mnt/etc/systemd/network

#15 => Change root to new system
    arch-chroot /mnt

#16 => get the repo add to your /etc/pacman.conf at the end
    vim /etc/pacman.conf
    #-----------------------------------------------------
    [g14]
    SigLevel = DatabaseNever Optional TrustAll
    Server = https://arch.asus-linux.org

#17 => Installing all the required packages
    pacman -S linux-g14 linux-firmware linux-g14-headers base-devel efibootmgr mtools dosfstools grub openssh os-prober iwd zsh \
    ntfs-3g amd-ucode xf86-video-amdgpu git plasma xdg-desktop-portal ark unrar kdeconnect sshfs dolphin okular konsole kate gwenview \
    networkmanager asusctl nvidia-dkms supergfxctl firefox deepin-icon-theme deepin-gtk-theme libappindicator-gtk3 appmenu-gtk-module \
    xdg-desktop-portal virtualgl
    
#18 => Removing unwanted packages
    pacman -Rnsc discover oxygen plasma-vault

#19 => Use KDE file picker
    export GTK_USE_PORTAL=1

#20 => Set the timezone
    ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime

#21 => Update the Hardware clock
    hwclock --systohc

#22 => Adjust system clock from real time clock
    timedatectl set-local-rtc 1 --adjust-system-clock

#23 => Set locale
    sed -i 's/#en_US.UTF-8/en_US.UTF-8/g' /etc/locale.gen (uncomment en_US.UTF-8)
    locale-gen
    #Create locale.conf
    vim /etc/locale.conf
    # Add the below line with your locale info
    LANG=en_US.UTF-8

#24 => Set your hostname
    vim /etc/hostname
    # Add something like below line
    ai

#25 => Set your hosts
    vim /etc/hosts
    # Add the below lines by making required changes
    127.0.0.1   localhost
    ::1         localhost
    127.0.1.1   ai.localdomain   ai

#26 => Install GRUB on EFI mode:
    os-prober #to detect windows boot partition
    grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck

#27 => Setup GRUB
    #Setup locale for GRUB
    cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
    #Write GRUB config:
    grub-mkconfig -o /boot/grub/grub.cfg

#28 => Set root password
    passwd

#29 => User creation
    useradd -m -g wheel ishna
    passwd ishna

#30 => Configure mkinitcpio
    vim /etc/mkinitcpio.conf
    # Update "HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)" to
    HOOKS=(base udev autodetect modconf block filesystems keyboard resume fsck)

#31 => generate initramfs  
    mkinitcpio -p linux-g14

#32 => EDITOR=vim visudo
    # uncomment below line
    %wheel ALL=(ALL) ALL

#33 => Enable required services
    systemctl enable systemd-networkd
    systemctl enable systemd-resolved
    systemctl enable systemd-timesyncd
    systemctl enable NetworkManager
    systemctl enable bluetooth
    systemctl enable power-profiles-daemon
    systemctl enable supergfxd
    systemctl enable sddm

#34 => Final Steps
    exit
    umount -a
    reboot
    login as ishna

#35 => Setup zsh
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

#36 => Setup paru (AUR Helper)
    cd /opt
    sudo git clone https://aur.archlinux.org/paru-git.git
    sudo chown -R $USER ./paru-git
    cd paru-git
    makepkg -si

#37 => Install required fonts
    paru -S ttf-comic-mono-git freetype2 ttf-ms-fonts
    sudo pacman -S freetype2 fontconfig cairo ttf-ubuntu-font-family noto-fonts noto-fonts-cjk ttf-dejavu ttf-liberation \
    ttf-opensans ttf-cascadia-code
    sudo ln -s /etc/fonts/conf.avail/70-no-bitmaps.conf /etc/fonts/conf.d
    sudo ln -s /etc/fonts/conf.avail/10-sub-pixel-rgb.conf /etc/fonts/conf.d
    sudo ln -s /etc/fonts/conf.avail/11-lcdfilter-default.conf /etc/fonts/conf.d
    sudo vim /etc/profile.d/freetype2.sh
    #Add/uncomment the following line to/in it, save and close 
    export FREETYPE_PROPERTIES="truetype:interpreter-version=40"
    #--------------------------------------------------------
    mkdir -p ~/.config/fontconfig/conf.d/
    vim ~/.config/fontconfig/conf.d/20-no-embedded.conf
    #Add the following lines to it, save and close 
    <?xml version="1.0"?>
    <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
    <fontconfig>
    <match target="font">
        <edit name="embeddedbitmap" mode="assign">
        <bool>false</bool>
        </edit>
    </match>
    </fontconfig>
    #------------------------------------------------------
    reboot

#38 => Setup touch pad
    sudo pacman -S xdotool wmctrl
    paru -S libinput-gestures
    #libinput-gestures will detect touchpad gestures and run a command when any set gesture is detected. 
    #xdotool will react to this by simulating keyboard events. To allow xdotool to work, the user you're using should be added to the input group:
    sudo gpasswd -a $USER input
    libinput-gestures-setup autostart
    libinput-gestures-setup start
    
#39 => Installing Razer software for keyboard, mouse configuration
    paru -S openrazer-meta razercommander
    sudo gpasswd -a $USER plugdev

#40 => Supergfxctl - graphics switching
    # integrated, uses the iGPU only and force-disables the dGPU
    sudo supergfxctl --mode integrated
    # dedicated, uses the Nvidia gpu only
    sudo supergfxctl --mode dedicated
    # hybrid, enables Nvidia prime-offload mode
    sudo supergfxctl --mode hybrid
    # compute, enables Nvidia without Xorg. Useful for ML/Cuda
    sudo supergfxctl --mode compute
    # vfio, binds the Nvidia gpu to vfio for VM pass-through
    sudo supergfxctl --mode vfio
    ****************************************
    reboot after switching
    ****************************************
    # get current mode
    sudo supergfxctl -g 

#41 => GPU stats tools
    #------------------------------------------------------
    #For getting stats of nvidia graphics
    #______________________________________________________
    nvidia-smi
    glxspheres64
